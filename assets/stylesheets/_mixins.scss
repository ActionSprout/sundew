@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}

@mixin modal-shadow{
  box-shadow: 0 15px 12px rgba(0, 0, 0, 0.22), 0 19px 38px rgba(0, 0, 0, 0.38);
}

@mixin card-shadow{
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.12), 0 2px 2px rgba(0, 0, 0, 0.24);
}

@mixin max-width($breakpoint) {
  @media only screen and (max-width: $breakpoint) { @content; }
}

@mixin min-width($breakpoint) {
  @media only screen and (min-width: $breakpoint) { @content; }
}

// @mixin position ($position: relative, $coordinates: 0 0 0 0) {

//   @if type-of($position) == list {
//     $coordinates: $position;
//     $position: relative;
//   }

//   $coordinates: unpack($coordinates);

//   $top: nth($coordinates, 1);
//   $right: nth($coordinates, 2);
//   $bottom: nth($coordinates, 3);
//   $left: nth($coordinates, 4);

//   position: $position;

//   @if ($top and $top == auto) or (type-of($top) == number and not(unitless($top))) {
//     top: $top;
//   }

//   @if ($right and $right == auto) or (type-of($right) == number and not(unitless($right))) {
//     right: $right;
//   }

//   @if ($bottom and $bottom == auto) or (type-of($bottom) == number and not(unitless($bottom))) {
//     bottom: $bottom;
//   }

//   @if ($left and $left == auto) or (type-of($left) == number and not(unitless($left))) {
//     left: $left;
//   }
// }

// @mixin prefixer ($property, $value, $prefixes) {
//   @each $prefix in $prefixes {
//     @if $prefix == webkit {
//       @if $prefix-for-webkit {
//         -webkit-#{$property}: $value;
//       }
//     }
//     @else if $prefix == moz {
//       @if $prefix-for-mozilla {
//         -moz-#{$property}: $value;
//       }
//     }
//     @else if $prefix == ms {
//       @if $prefix-for-microsoft {
//         -ms-#{$property}: $value;
//       }
//     }
//     @else if $prefix == o {
//       @if $prefix-for-opera {
//         -o-#{$property}: $value;
//       }
//     }
//     @else if $prefix == spec {
//       @if $prefix-for-spec {
//         #{$property}: $value;
//       }
//     }
//     @else  {
//       @warn "Unrecognized prefix: #{$prefix}";
//     }
//   }
// }

@mixin square-thumbnail($height) {
  position: relative;
  height: $height;
  overflow: hidden;

  img {
    transform: translate(-50%, -50%);
    // @include prefixer(transform, translate(-50%, -50%), webkit moz spec ms);
    position: absolute;
    left: 50%;
    top: 50%;
    min-height: 100%;
    min-width: 100%;
    width: auto;
  }
}
